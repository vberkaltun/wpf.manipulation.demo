# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: MSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArchitecture: 'x64'
    msbuildArguments: >-
        -p:AppxBundle=Always
        -p:AppxBundlePlatforms="$(buildPlatform)"
        -p:AppxPackageDir="$(Build.ArtifactStagingDirectory)\\AppxPackages\\"
        -p:AppxSymbolPackageEnabled=false
        -p:UapAppxPackageBuildMode=SideLoadOnly

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
        $sourceDirectory = Join-Path -ChildPath "ci\assets\*" -Path $($Env:BUILD_SOURCESDIRECTORY + "\")
        $targetDirectory = Join-Path -ChildPath "AppxPackages" -Path $($Env:BUILD_ARTIFACTSTAGINGDIRECTORY + "\")

        Write-Host "Source directory: '$($sourceDirectory)'"
        Write-Host "Target directory: '$($targetDirectory)'"

        If ([string]::IsNullOrEmpty($sourceDirectory) -or
            [string]::IsNullOrEmpty($targetDirectory) -or
            -not (Test-Path $sourceDirectory) -or
            -not (Test-Path $targetDirectory))
        {
            Write-Host "No action due to wrong inputs, terminating..."
            exit
        }

        $postFix = "*_Test"
        $subPath = Get-ChildItem -Path $targetDirectory `
            | Where-Object { $_.Name -like $postFix -and $_.PSIsContainer } `
            | Select-Object -ExpandProperty FullName

        If ([string]::IsNullOrEmpty($subPath) -or
            -not (Test-Path $subPath))
        {
            Write-Host "No subdirectory with '$($postFix)' postfix found in '$($subPath)', terminating..."
            exit
        }

        Copy-item -Force -Recurse $sourceDirectory -Destination $subPath
        Write-Host "Files in '$($sourceDirectory)' successfully copied to '$($subPath)'"

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: UWP installer'
  inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)\AppxPackages\
      ArtifactName: Installer